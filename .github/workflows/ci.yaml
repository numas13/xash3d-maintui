name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - run: cargo check --workspace --all-features --all-targets

  check_style:
    name: Check style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  check-msrv:
    name: Check MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.79.0"
      - run: cargo check --workspace --all-targets --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - run: cargo clippy --workspace --all-features

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - run: cargo test --workspace --all-features

  build:
    runs-on: ${{ matrix.platform.runs-on }}
    needs:
      - check
      - clippy
      - test
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runs-on: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            lib: libmenu.so

          - runs-on: ubuntu-22.04
            target: i686-unknown-linux-gnu
            lib: libmenu.so

          - runs-on: ubuntu-22.04
            target: riscv64gc-unknown-linux-gnu
            lib: libmenu.so

          - runs-on: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            lib: libmenu.so

          - runs-on: windows-2022
            target: i686-pc-windows-msvc
            lib: menu.dll

          - runs-on: windows-2022
            target: x86_64-pc-windows-msvc
            lib: menu.dll

          - runs-on: macos-14
            target: aarch64-apple-darwin
            lib: libmenu.dylib

          - runs-on: macos-13
            target: x86_64-apple-darwin
            lib: libmenu.dylib
    steps:
      - uses: actions/checkout@v4
      - uses: houseabsolute/actions-rust-cross@v1
        with:
            target: ${{ matrix.platform.target }}
            args: "--release"
      - run: |
          mkdir staging/
          mkdir staging/valve/
          mkdir staging/valve/resource/
          mkdir artifacts/
          cp data/maintui_LANG_*.txt staging/valve/resource/
          cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.lib }} staging/
          pushd staging/
            tar -czvf ../artifacts/xash3d-maintui-${{ matrix.platform.target }}.tar.gz *
          popd
      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform.target }}
          path: artifacts/*

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' }}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.ref_name == 'master' && 'continuous' || format('continuous-{0}', github.ref_name) }}
        run: |
          gh release delete "$RELEASE_TAG" \
            --yes \
            --cleanup-tag \
            --repo "$GITHUB_REPOSITORY" || true
          sleep 20s
          gh run download "$GITHUB_RUN_ID" \
            --dir artifacts/ \
            --repo "$GITHUB_REPOSITORY"
          pushd artifacts/
          echo "Found artifacts:"
          ls
          for i in $(find -mindepth 1 -maxdepth 1 -type d); do
            mv "$i"/* .
            rm -rf "$i"
          done
          echo "Repackaged artifacts:"
          ls -R
          popd
          sleep 20s
          gh release create "$RELEASE_TAG" artifacts/* \
            --title "xash3d-maintui Continuous ${{ github.ref_name }} Build" \
            --target $GITHUB_SHA \
            --repo "$GITHUB_REPOSITORY" \
            --prerelease
